using System;
using System.Diagnostics;
using System.Threading;

namespace Func_async
{
    class Program
    {
        public static void ThreadpoolProcess()
        {
            Stopwatch sw = Stopwatch.StartNew();
            Console.WriteLine("Start ThreadPool process now...");
            int iResult = RunInThreadPool();
            Console.WriteLine("The Result = {0}"
                , iResult);
            Console.WriteLine("Total time = {0} second(s)!"
                , sw.ElapsedMilliseconds / 1000);
        }

        public static int RunInThreadPool()
        {
            int iResult1 = 0;
            // Creating and running thread for LongProcess1()
            Thread thr1 = new Thread(() =>
            {
                iResult1 = LongProcess1();
            });
            thr1.Start();
            // Running LongProcess2()
            int iResult2 = LongProcess2();
            // Waiting for the thread to finish
            thr1.Join();
            // Return the total result
            return iResult1 + iResult2;
        }

        public static int LongProcess1()
        {
            Thread.Sleep(5000);
            return 5;
        }

        public static int LongProcess2()
        {
            Thread.Sleep(7000);
            return 7;
        }

        static void Main(string[] args)
        {
            ThreadpoolProcess();
        }
    }
}
